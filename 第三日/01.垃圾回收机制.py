#coding=utf-8

'''

小整数对象池
-5到256，包含256.这些数据是提前准备好的，不被垃圾回收的

interen机制（共享机制）：
如果字符串内包含空格或者其他字符#@%等，这些是会创建不同的内存对象进行存储

Garbage collection(GC垃圾回收机制)
一。以引用计数机制为主，当计数变量为0，没有了引用，内存就直接释放了。
缺点：循环引用无法解决，相互引用的对象无法被正常回收

二。Python与Ruby垃圾回收机制的不同
Ruby是提前建立好单链表的内存空间，用标记-清除方法回收不使用的变量内存
双向链表的使用要小心产生垃圾内存空间
当引用对象为None时，创建的内存空间也是空

Python使用隔代回收机制来处理双向调用问题，
定义标记 
0代链表 一定场景触发 所有引用计数减一,会判断是否是相互引用的对象。如果相互引用的话，不会被放到1代链表
1代链表 0代链表清理完之后放在的，0号链清理了很多次之后，1代才清理一次
2代链表 1号链中清理剩下的链子中的剩余的内存变量，2代清理的速度更慢

弱代假说：
首先是年轻的对象通常死得也很快，而老对象则有可能存货更长时间

'''
