#coding=utf-8

'''

进制 逢X进一 就是X进制数
有符号数 最高位被规定为符号位(0为正，1为负)
无符号数 最高位被规定为数据位

数字在计算机中，是用二进制补码的形式来保存的，因此-1+1需要
按照补码进行相加才是正确的结果

计算补码规则：正数：原码 = 反码 = 补码
              负数：反码 = 符号位不变，其他位取反
                    补码 = 反码 + 1

从补码转换为原码：原码 = 补码的符号位不变-->数据位取反-->尾+1
                -1 的补码：1111 1111 1111 1111
                     取反：1000 0000 0000 0000
                -1 的原码：1000 0000 0000 0001
10进制转为2进制
bin(10)->0b1010

2进制转为10进制
int("1001",2)->9

10进制转为16进制
hex(10)->0xa

16进制到10进制
int('ff', 16)->255

int('0xab', 16)->171

16进制到2进制
bin(0xa)->0b1010

10进制到8进制
oct(8)->010

2进制到16进制
hex(0b1001)->0x9

位运算：
<< 按位左移
各二进位全部左移n位，高位丢弃，低位补0
x << n 左移x的所有二进制位向左移动n位，移出位删掉，移进的位补零
用途：快速计算一个数乘以2的n次方(8<<3等同于8*2^3)

>> 按位右移
各二进制位全部右移n位，保持符号位不变
x >> n x的所有二进制位向右移动n位，移出的位删掉，移进的位补
符号位，右移不会改变一个数的符号
用途：快速计算一个数除以2的n次方(8>>3等同于8/2^3)

&按位与
全1才1否则0：只有对应的两个二进制位均位1时，结果位才为1，否则为0

|按位或
有1就1 只有对应的两个二进位有一个为1时，结果位就为1 否则为0

^按位异或
不同位1 当对应的二进位不同时，结果为1，否则位0


'''
